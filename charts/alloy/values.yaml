service:
  enabled: true
  ports:
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: otlp-http
      port: 4318
      targetPort: 4318
      protocol: TCP

alloy:
  # Add these arguments to prevent the reload issue
  extraArgs:
    - "--disable-reporting"

  # Define resource requests/limits to ensure Alloy has enough capacity
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "250m"
      memory: "256Mi"

  configMap:
    content: |-
      logging {
        level  = "info"
        format = "logfmt"
      }

      // Create a metrics exporter for Prometheus
      otelcol.exporter.prometheus "prom" {
        forward_to = [prometheus.remote_write.default.receiver]
      }

      otelcol.exporter.loki "logs" {
        forward_to = [loki.write.default.receiver]
      }

      // Simplified: forward logs directly to Loki for v1.10 compatibility

      // Batch processor for logs
      otelcol.processor.batch "logs" {
        timeout = "30s"  // Send logs to Loki every 30 seconds or when batch size is reached
        send_batch_size = 1000
        output {
          logs = [otelcol.exporter.loki.logs.input]
        }
      }

      // Batch processor for metrics
      otelcol.processor.batch "metrics" {
        timeout = "10s" 
        send_batch_size = 1000
        output {
          metrics = [otelcol.exporter.prometheus.prom.input]
        }
      }

      otelcol.receiver.otlp "default" {
        grpc {
          endpoint = "0.0.0.0:4317"
        }
        http {
          endpoint = "0.0.0.0:4318"
        }
        output {
          metrics = [otelcol.processor.batch.metrics.input]
          logs    = [otelcol.processor.batch.logs.input]
          traces  = [otelcol.exporter.otlp.tempo.input]
        }
      }

      // OTLP exporter for traces going to Tempo
      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "my-tempo:4318"
        }
      }

      // --- Prometheus Scraping ---

      // Discover Kubernetes pods and services
      discovery.kubernetes "pods" {
        role = "pod"
      }

      // Scrape discovered pods based on annotations
      prometheus.scrape "kubernetes_pods" {
        targets    = discovery.kubernetes.pods.targets
        forward_to = [prometheus.remote_write.default.receiver]
      }

      // Define where to send Prometheus metrics
      prometheus.remote_write "default" {
        endpoint {
          url = "http://my-prometheus-server/api/v1/write"
        }
      }

      // --- Loki Log Scraping ---

      // Scrape logs from Kubernetes containers with filtering
      loki.source.kubernetes "pods" {
        targets    = discovery.kubernetes.pods.targets
        forward_to = [loki.write.default.receiver]
      }

      // Define where to send Loki logs
      loki.write "default" {
        endpoint {
          url = "http://loki:3100/loki/api/v1/push"
          tenant_id = "1"
        }
        external_labels = {
          cluster = "colima",
        }
      }
